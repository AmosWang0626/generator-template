package ${package.Controller};

import ${commonPkg}.model.PageQuery;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import javax.annotation.Resource;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * $!{table.comment} 前端控制器
 *
 * @author ${author}
 * @date ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    #set($tableServiceName = ${table.serviceName})
    #set($humpServiceName = $tableServiceName.substring(0,1).toLowerCase() + $tableServiceName.substring(1))
    @Resource
    private ${table.serviceName} ${humpServiceName};

    @PostMapping("findByPage")
    public Page<${entity}> findByPage(@RequestBody PageQuery<${entity}> pageQuery) {
        LambdaQueryWrapper<${entity}> wrapper = Wrappers.lambdaQuery();
        ${entity} param = pageQuery.getParam();
        if (Objects.nonNull(param)) {
            /// wrapper.select(${entity}::getName).like(Objects.nonNull(param.getName()), ${entity}::getName, param.getName());
        }

        return ${humpServiceName}.page(pageQuery, wrapper);
    }

    @GetMapping("/{id}")
    public ${entity} getById(@PathVariable("id") Long id) {
        return ${humpServiceName}.getById(id);
    }

    @PostMapping
    public Boolean save(@RequestBody ${entity} param) {
        return ${humpServiceName}.save(param);
    }

    @PutMapping
    public Boolean updateById(@RequestBody ${entity} param) {
        return ${humpServiceName}.updateById(param);
    }

    @DeleteMapping("/{id}")
    public Boolean removeById(@PathVariable("id") Long id) {
        ${entity} record = new ${entity}();
        record.setId(id);
        record.setGmtModified(LocalDateTime.now());
        return ${humpServiceName}.removeById(record);
    }

}
#end
